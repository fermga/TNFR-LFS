name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      core_pkg: ${{ steps.filter.outputs.core_pkg }}
      examples: ${{ steps.filter.outputs.examples }}
      analysis: ${{ steps.filter.outputs.analysis }}
      cli: ${{ steps.filter.outputs.cli }}
      exporters: ${{ steps.filter.outputs.exporters }}
      ingestion: ${{ steps.filter.outputs.ingestion }}
      io: ${{ steps.filter.outputs.io }}
      processing: ${{ steps.filter.outputs.processing }}
      recommender: ${{ steps.filter.outputs.recommender }}
      plugins: ${{ steps.filter.outputs.plugins }}
      docs: ${{ steps.filter.outputs.docs }}
      full_suite_on_main: ${{ steps.determine-pytest.outputs.full_suite_on_main }}
      should_run_tests: ${{ steps.determine-pytest.outputs.should_run_tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # Each filter below mirrors a logical product area. When adding a
          # module or a new test file, update the relevant glob here (and in the
          # test matrix below) so the downstream pytest selection remains
          # accurate.
          filters: |
            core:
              - '.github/**'
              - 'benchmarks/**'
              - 'config/**'
              - 'Makefile'
              - 'mkdocs.yml'
              - 'modifiers/**'
              - 'pyproject.toml'
              - 'tests/**'
              - 'tnfr_lfs.toml'
              - 'src/tnfr_lfs/**'
              - 'typing_targets/**'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - '**/*.md'
            analysis:
              - 'src/tnfr_lfs/analysis/**'
              - 'tests/test_analysis_*.py'
              - 'tests/analysis/**'
            core_pkg:
              - 'src/tnfr_lfs/core/**'
              - 'tests/test_core_*.py'
              - 'tests/test_coherence*.py'
              - 'tests/test_contextual_delta.py'
              - 'tests/test_metrics.py'
              - 'tests/test_operator_detection.py'
              - 'tests/test_phase_alias_deprecations.py'
              - 'tests/test_resonance.py'
              - 'tests/test_segmentation.py'
              - 'tests/test_structural_time.py'
              - 'tests/test_epi.py'
            cli:
              - 'src/tnfr_lfs/cli/**'
              - 'tests/test_cli*.py'
              - '!tests/test_cli_osd.py'
              - 'tests/test_cli_parser.py'
            exporters:
              - 'src/tnfr_lfs/exporters/**'
              - 'tests/test_*exporter*.py'
              - 'tests/test_replay_csv_bundle.py'
            ingestion:
              - 'src/tnfr_lfs/ingestion/**'
              - 'tests/test_ingestion.py'
              - 'tests/test_outgauge_udp.py'
              - 'tests/test_outsim_udp.py'
              - 'tests/test_insim.py'
              - 'tests/test_track_loader.py'
              - 'tests/ingestion/**'
            io:
              - 'src/tnfr_lfs/io/**'
              - 'tests/test_io_*.py'
              - 'tests/test_cli_io.py'
            processing:
              - 'src/tnfr_lfs/processing.py'
              - 'src/tnfr_lfs/processing/**'
              - 'tests/test_processing.py'
            recommender:
              - 'src/tnfr_lfs/recommender/**'
              - 'tests/test_recommender*.py'
              - 'tests/test_recommender_search_cache.py'
            plugins:
              - 'src/tnfr_lfs/plugins/**'
              - 'tests/plugins/**'
              - 'tests/test_cli_osd.py'
      - name: Determine pytest selection
        id: determine-pytest
        env:
          CHANGED_AREAS: ${{ steps.filter.outputs.changes }}
          IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
        run: |
          python - <<'PY'
          import json
          import os

          changes = json.loads(os.environ["CHANGED_AREAS"])
          is_main = os.environ["IS_MAIN"].lower() == "true"

          full_suite = is_main and not changes
          should_run = full_suite or bool(changes)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"full_suite_on_main={'true' if full_suite else 'false'}\n")
              fh.write(f"should_run_tests={'true' if should_run else 'false'}\n")
          PY


  test:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.should_run_tests == 'true' && matrix.run == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - area: analysis
            display_name: analysis
            pytest_args: >-
              tests/test_analysis_*.py
              tests/analysis
            run: ${{ needs.detect-changes.outputs.analysis }}
          - area: core_pkg
            display_name: core
            pytest_args: >-
              tests/test_core_*.py
              tests/test_coherence*.py
              tests/test_contextual_delta.py
              tests/test_metrics.py
              tests/test_operator_detection.py
              tests/test_phase_alias_deprecations.py
              tests/test_resonance.py
              tests/test_segmentation.py
              tests/test_structural_time.py
              tests/test_epi.py
            run: ${{ needs.detect-changes.outputs.core_pkg }}
          - area: cli
            display_name: cli
            pytest_args: >-
              tests/test_cli.py
              tests/test_cli_*.py
              tests/test_cli_parser.py
            run: ${{ needs.detect-changes.outputs.cli }}
          - area: exporters
            display_name: exporters
            pytest_args: >-
              tests/test_*exporter*.py
              tests/test_replay_csv_bundle.py
            run: ${{ needs.detect-changes.outputs.exporters }}
          - area: ingestion
            display_name: ingestion
            pytest_args: >-
              tests/test_ingestion.py
              tests/test_outgauge_udp.py
              tests/test_outsim_udp.py
              tests/test_insim.py
              tests/test_track_loader.py
              tests/ingestion
            run: ${{ needs.detect-changes.outputs.ingestion }}
          - area: io
            display_name: io
            pytest_args: >-
              tests/test_io_*.py
              tests/test_cli_io.py
            run: ${{ needs.detect-changes.outputs.io }}
          - area: processing
            display_name: processing
            pytest_args: tests/test_processing.py
            run: ${{ needs.detect-changes.outputs.processing }}
          - area: recommender
            display_name: recommender
            pytest_args: >-
              tests/test_recommender*.py
              tests/test_recommender_search_cache.py
            run: ${{ needs.detect-changes.outputs.recommender }}
          - area: plugins
            display_name: plugins
            pytest_args: >-
              tests/plugins
              tests/test_cli_osd.py
            run: ${{ needs.detect-changes.outputs.plugins }}
          - area: full
            display_name: full
            pytest_args: ''
            run: ${{ needs.detect-changes.outputs.full_suite_on_main }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy --strict
      - name: Publish pytest selection
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.display_name }}
        run: |
          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "* **${PYTEST_AREA}** → full suite" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "* **${PYTEST_AREA}** → ${PYTEST_ARGS}" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Pytest
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          set -euo pipefail

          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "Running full pytest suite"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing
          else
            echo "Running targeted pytest selection for area '$PYTEST_AREA': $PYTEST_ARGS"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing $PYTEST_ARGS
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  link-check:
    name: Documentation links
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.docs == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --config lychee.toml
            --no-progress
            --verbose
            README.md
            docs/**/*.md

  quickstart:
    needs:
      - detect-changes
    if: >-
      github.ref == 'refs/heads/main' ||
      needs.detect-changes.outputs.examples == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Quickstart (simulated pipeline)
        run: make quickstart
