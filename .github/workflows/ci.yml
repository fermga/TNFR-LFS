name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      core_pkg: ${{ steps.filter.outputs.core_pkg }}
      examples: ${{ steps.filter.outputs.examples }}
      analysis: ${{ steps.filter.outputs.analysis }}
      cli: ${{ steps.filter.outputs.cli }}
      exporters: ${{ steps.filter.outputs.exporters }}
      ingestion: ${{ steps.filter.outputs.ingestion }}
      io: ${{ steps.filter.outputs.io }}
      processing: ${{ steps.filter.outputs.processing }}
      recommender: ${{ steps.filter.outputs.recommender }}
      plugins: ${{ steps.filter.outputs.plugins }}
      docs: ${{ steps.filter.outputs.docs }}
      pytest_any: ${{
        steps.filter.outputs.analysis == 'true' ||
        steps.filter.outputs.core_pkg == 'true' ||
        steps.filter.outputs.cli == 'true' ||
        steps.filter.outputs.exporters == 'true' ||
        steps.filter.outputs.ingestion == 'true' ||
        steps.filter.outputs.io == 'true' ||
        steps.filter.outputs.processing == 'true' ||
        steps.filter.outputs.recommender == 'true' ||
        steps.filter.outputs.plugins == 'true'
      }}
      pytest_full: ${{
        github.ref == 'refs/heads/main' || (
          steps.filter.outputs.analysis != 'true' &&
          steps.filter.outputs.core_pkg != 'true' &&
          steps.filter.outputs.cli != 'true' &&
          steps.filter.outputs.exporters != 'true' &&
          steps.filter.outputs.ingestion != 'true' &&
          steps.filter.outputs.io != 'true' &&
          steps.filter.outputs.processing != 'true' &&
          steps.filter.outputs.recommender != 'true' &&
          steps.filter.outputs.plugins != 'true'
        )
      }}
      pytest_matrix: ${{ steps.build-pytest-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # Each filter below mirrors a logical product area. When adding a
          # module or a new test file, update the relevant glob so the
          # downstream pytest selection remains accurate.
          filters: |
            core:
              - '.github/**'
              - 'benchmarks/**'
              - 'config/**'
              - 'Makefile'
              - 'mkdocs.yml'
              - 'modifiers/**'
              - 'pyproject.toml'
              - 'tests/**'
              - 'tnfr_lfs.toml'
              - 'src/tnfr_lfs/**'
              - 'typing_targets/**'
            core_pkg:
              - 'src/tnfr_lfs/core/**'
              - 'tests/test_core_*.py'
              - 'tests/test_coherence*.py'
              - 'tests/test_contextual_delta.py'
              - 'tests/test_metrics.py'
              - 'tests/test_operator_detection.py'
              - 'tests/test_phase_alias_deprecations.py'
              - 'tests/test_resonance.py'
              - 'tests/test_segmentation.py'
              - 'tests/test_structural_time.py'
              - 'tests/test_epi.py'
            analysis:
              - 'src/tnfr_lfs/analysis/**'
              - 'tests/test_analysis_*.py'
              - 'tests/analysis/**'
            cli:
              - 'src/tnfr_lfs/cli/**'
              - 'tests/test_cli*.py'
              - '!tests/test_cli_osd.py'
              - 'tests/test_cli_parser.py'
            exporters:
              - 'src/tnfr_lfs/exporters/**'
              - 'tests/test_*exporter*.py'
              - 'tests/test_replay_csv_bundle.py'
            ingestion:
              - 'src/tnfr_lfs/ingestion/**'
              - 'tests/test_ingestion.py'
              - 'tests/test_outgauge_udp.py'
              - 'tests/test_outsim_udp.py'
              - 'tests/test_insim.py'
              - 'tests/test_track_loader.py'
              - 'tests/ingestion/**'
            io:
              - 'src/tnfr_lfs/io/**'
              - 'tests/test_io_*.py'
              - 'tests/test_cli_io.py'
            processing:
              - 'src/tnfr_lfs/processing.py'
              - 'src/tnfr_lfs/processing/**'
              - 'tests/test_processing.py'
            recommender:
              - 'src/tnfr_lfs/recommender/**'
              - 'tests/test_recommender*.py'
              - 'tests/test_recommender_search_cache.py'
            plugins:
              - 'src/tnfr_lfs/plugins/**'
              - 'tests/plugins/**'
              - 'tests/test_cli_osd.py'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - '**/*.md'
      - name: Build pytest matrix
        id: build-pytest-matrix
        # Update the mapping below when introducing a new pytest area. The
        # script emits the JSON consumed by the test job's strategy so no other
        # section of this workflow needs adjusting.
        uses: actions/github-script@v7
        env:
          ANALYSIS: ${{ steps.filter.outputs.analysis }}
          CORE_PKG: ${{ steps.filter.outputs.core_pkg }}
          CLI: ${{ steps.filter.outputs.cli }}
          EXPORTERS: ${{ steps.filter.outputs.exporters }}
          INGESTION: ${{ steps.filter.outputs.ingestion }}
          IO: ${{ steps.filter.outputs.io }}
          PROCESSING: ${{ steps.filter.outputs.processing }}
          RECOMMENDER: ${{ steps.filter.outputs.recommender }}
          PLUGINS: ${{ steps.filter.outputs.plugins }}
          PYTEST_FULL: ${{
            github.ref == 'refs/heads/main' || (
              steps.filter.outputs.analysis != 'true' &&
              steps.filter.outputs.core_pkg != 'true' &&
              steps.filter.outputs.cli != 'true' &&
              steps.filter.outputs.exporters != 'true' &&
              steps.filter.outputs.ingestion != 'true' &&
              steps.filter.outputs.io != 'true' &&
              steps.filter.outputs.processing != 'true' &&
              steps.filter.outputs.recommender != 'true' &&
              steps.filter.outputs.plugins != 'true'
            )
          }}
        with:
          result-encoding: string
          script: |
            const areaMap = [
              {
                area: 'analysis',
                flag: process.env.ANALYSIS,
                pytest_args: `tests/test_analysis_*.py
tests/analysis`,
              },
              {
                area: 'core',
                flag: process.env.CORE_PKG,
                pytest_args: `tests/test_core_*.py
tests/test_coherence*.py
tests/test_contextual_delta.py
tests/test_metrics.py
tests/test_operator_detection.py
tests/test_phase_alias_deprecations.py
tests/test_resonance.py
tests/test_segmentation.py
tests/test_structural_time.py
tests/test_epi.py`,
              },
              {
                area: 'cli',
                flag: process.env.CLI,
                pytest_args: `tests/test_cli.py
tests/test_cli_*.py
tests/test_cli_parser.py`,
              },
              {
                area: 'exporters',
                flag: process.env.EXPORTERS,
                pytest_args: `tests/test_*exporter*.py
tests/test_replay_csv_bundle.py`,
              },
              {
                area: 'ingestion',
                flag: process.env.INGESTION,
                pytest_args: `tests/test_ingestion.py
tests/test_outgauge_udp.py
tests/test_outsim_udp.py
tests/test_insim.py
tests/test_track_loader.py
tests/ingestion`,
              },
              {
                area: 'io',
                flag: process.env.IO,
                pytest_args: `tests/test_io_*.py
tests/test_cli_io.py`,
              },
              {
                area: 'processing',
                flag: process.env.PROCESSING,
                pytest_args: 'tests/test_processing.py',
              },
              {
                area: 'recommender',
                flag: process.env.RECOMMENDER,
                pytest_args: `tests/test_recommender*.py
tests/test_recommender_search_cache.py`,
              },
              {
                area: 'plugins',
                flag: process.env.PLUGINS,
                pytest_args: `tests/plugins
tests/test_cli_osd.py`,
              },
            ];

            const include = areaMap
              .filter((entry) => entry.flag === 'true')
              .map(({ area, pytest_args }) => ({ area, pytest_args }));

            if (process.env.PYTEST_FULL === 'true') {
              include.unshift({ area: 'full', pytest_args: '' });
            }

            const matrix = { include };

            return JSON.stringify(matrix);


  test:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.pytest_matrix != '{"include":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-changes.outputs.pytest_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy --strict
      - name: Publish pytest selection
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "* **${PYTEST_AREA}** → full suite" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "* **${PYTEST_AREA}** → ${PYTEST_ARGS}" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Pytest
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          set -euo pipefail

          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "Running full pytest suite"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing
          else
            echo "Running targeted pytest selection for area '$PYTEST_AREA': $PYTEST_ARGS"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing $PYTEST_ARGS
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  link-check:
    name: Documentation links
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.docs == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --config lychee.toml
            --no-progress
            --verbose
            README.md
            docs/**/*.md

  quickstart:
    needs:
      - detect-changes
    if: >-
      github.ref == 'refs/heads/main' ||
      needs.detect-changes.outputs.examples == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Quickstart (simulated pipeline)
        run: make quickstart
