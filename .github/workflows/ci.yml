name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      core_pkg: ${{ steps.filter.outputs.core_pkg }}
      examples: ${{ steps.filter.outputs.examples }}
      analysis: ${{ steps.filter.outputs.analysis }}
      cli: ${{ steps.filter.outputs.cli }}
      exporters: ${{ steps.filter.outputs.exporters }}
      ingestion: ${{ steps.filter.outputs.ingestion }}
      io: ${{ steps.filter.outputs.io }}
      processing: ${{ steps.filter.outputs.processing }}
      recommender: ${{ steps.filter.outputs.recommender }}
      plugins: ${{ steps.filter.outputs.plugins }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # Each filter below mirrors a logical product area. When adding a
          # module or a new test file, update the relevant glob so the
          # downstream pytest selection remains accurate.
          filters: |
            core:
              - '.github/**'
              - 'benchmarks/**'
              - 'config/**'
              - 'Makefile'
              - 'mkdocs.yml'
              - 'modifiers/**'
              - 'pyproject.toml'
              - 'tests/**'
              - 'tnfr_lfs.toml'
              - 'src/tnfr_lfs/**'
              - 'typing_targets/**'
            core_pkg:
              - 'src/tnfr_lfs/core/**'
              - 'tests/test_core_*.py'
              - 'tests/test_coherence*.py'
              - 'tests/test_contextual_delta.py'
              - 'tests/test_metrics.py'
              - 'tests/test_operator_detection.py'
              - 'tests/test_phase_alias_deprecations.py'
              - 'tests/test_resonance.py'
              - 'tests/test_segmentation.py'
              - 'tests/test_structural_time.py'
              - 'tests/test_epi.py'
            analysis:
              - 'src/tnfr_lfs/analysis/**'
              - 'tests/test_analysis_*.py'
              - 'tests/analysis/**'
            cli:
              - 'src/tnfr_lfs/cli/**'
              - 'tests/test_cli*.py'
              - '!tests/test_cli_osd.py'
              - 'tests/test_cli_parser.py'
            exporters:
              - 'src/tnfr_lfs/exporters/**'
              - 'tests/test_*exporter*.py'
              - 'tests/test_replay_csv_bundle.py'
            ingestion:
              - 'src/tnfr_lfs/ingestion/**'
              - 'tests/test_ingestion.py'
              - 'tests/test_outgauge_udp.py'
              - 'tests/test_outsim_udp.py'
              - 'tests/test_insim.py'
              - 'tests/test_track_loader.py'
              - 'tests/ingestion/**'
            io:
              - 'src/tnfr_lfs/io/**'
              - 'tests/test_io_*.py'
              - 'tests/test_cli_io.py'
            processing:
              - 'src/tnfr_lfs/processing.py'
              - 'src/tnfr_lfs/processing/**'
              - 'tests/test_processing.py'
            recommender:
              - 'src/tnfr_lfs/recommender/**'
              - 'tests/test_recommender*.py'
              - 'tests/test_recommender_search_cache.py'
            plugins:
              - 'src/tnfr_lfs/plugins/**'
              - 'tests/plugins/**'
              - 'tests/test_cli_osd.py'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - '**/*.md'

  test:
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.core == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy --strict
      - name: Determine pytest target selection
        id: pytest-targets
        env:
          ON_MAIN: ${{ github.ref == 'refs/heads/main' }}
          CHANGED_CORE: ${{ needs.detect-changes.outputs.core_pkg }}
          CHANGED_ANALYSIS: ${{ needs.detect-changes.outputs.analysis }}
          CHANGED_CLI: ${{ needs.detect-changes.outputs.cli }}
          CHANGED_EXPORTERS: ${{ needs.detect-changes.outputs.exporters }}
          CHANGED_INGESTION: ${{ needs.detect-changes.outputs.ingestion }}
          CHANGED_IO: ${{ needs.detect-changes.outputs.io }}
          CHANGED_PROCESSING: ${{ needs.detect-changes.outputs.processing }}
          CHANGED_RECOMMENDER: ${{ needs.detect-changes.outputs.recommender }}
          CHANGED_PLUGINS: ${{ needs.detect-changes.outputs.plugins }}
        run: |
          set -euo pipefail

          if [[ "$ON_MAIN" == "true" ]]; then
            echo "args=" >> "$GITHUB_OUTPUT"
            echo "summary=main branch -> run full suite" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          areas=()
          if [[ "$CHANGED_ANALYSIS" == "true" ]]; then areas+=("analysis"); fi
          if [[ "$CHANGED_CORE" == "true" ]]; then areas+=("core"); fi
          if [[ "$CHANGED_CLI" == "true" ]]; then areas+=("cli"); fi
          if [[ "$CHANGED_EXPORTERS" == "true" ]]; then areas+=("exporters"); fi
          if [[ "$CHANGED_INGESTION" == "true" ]]; then areas+=("ingestion"); fi
          if [[ "$CHANGED_IO" == "true" ]]; then areas+=("io"); fi
          if [[ "$CHANGED_PROCESSING" == "true" ]]; then areas+=("processing"); fi
          if [[ "$CHANGED_RECOMMENDER" == "true" ]]; then areas+=("recommender"); fi
          if [[ "$CHANGED_PLUGINS" == "true" ]]; then areas+=("plugins"); fi

          if (( ${#areas[@]} == 0 )); then
            echo "args=" >> "$GITHUB_OUTPUT"
            echo "summary=no targeted area detected -> run full suite" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          targets=()

          for area in "${areas[@]}"; do
            area_targets=()
            case "$area" in
              analysis)
                area_targets=("tests/test_analysis_*.py" "tests/analysis")
                ;;
              core)
                area_targets=(
                  "tests/test_core_*.py"
                  "tests/test_coherence*.py"
                  "tests/test_contextual_delta.py"
                  "tests/test_metrics.py"
                  "tests/test_operator_detection.py"
                  "tests/test_phase_alias_deprecations.py"
                  "tests/test_resonance.py"
                  "tests/test_segmentation.py"
                  "tests/test_structural_time.py"
                  "tests/test_epi.py"
                )
                ;;
              cli)
                area_targets=(
                  "tests/test_cli.py"
                  "tests/test_cli_*.py"
                  "tests/test_cli_parser.py"
                )
                ;;
              exporters)
                area_targets=(
                  "tests/test_*exporter*.py"
                  "tests/test_replay_csv_bundle.py"
                )
                ;;
              ingestion)
                area_targets=(
                  "tests/test_ingestion.py"
                  "tests/test_outgauge_udp.py"
                  "tests/test_outsim_udp.py"
                  "tests/test_insim.py"
                  "tests/test_track_loader.py"
                  "tests/ingestion"
                )
                ;;
              io)
                area_targets=("tests/test_io_*.py" "tests/test_cli_io.py")
                ;;
              processing)
                area_targets=("tests/test_processing.py")
                ;;
              recommender)
                area_targets=(
                  "tests/test_recommender*.py"
                  "tests/test_recommender_search_cache.py"
                )
                ;;
              plugins)
                area_targets=(
                  "tests/plugins"
                  "tests/test_cli_osd.py"
                )
                ;;
              *)
                ;;
            esac

            if (( ${#area_targets[@]} > 0 )); then
              targets+=("${area_targets[@]}")
            fi
          done

          if (( ${#targets[@]} == 0 )); then
            echo "args=" >> "$GITHUB_OUTPUT"
            echo "summary=areas (${areas[*]}) have no explicit targets -> run full suite" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "args=${targets[*]}" >> "$GITHUB_OUTPUT"
          echo "summary=targeted run for areas (${areas[*]}) -> ${targets[*]}" >> "$GITHUB_OUTPUT"

      - name: Pytest
        env:
          PYTEST_TARGET_ARGS: ${{ steps.pytest-targets.outputs.args }}
          PYTEST_SELECTION_SUMMARY: ${{ steps.pytest-targets.outputs.summary }}
        run: |
          set -euo pipefail

          if [[ -n "$PYTEST_SELECTION_SUMMARY" ]]; then
            echo "$PYTEST_SELECTION_SUMMARY" >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ -z "$PYTEST_TARGET_ARGS" ]]; then
            echo "Running full pytest suite"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing
          else
            echo "Running targeted pytest selection: $PYTEST_TARGET_ARGS"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing $PYTEST_TARGET_ARGS
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  link-check:
    name: Documentation links
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.docs == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --config lychee.toml
            --no-progress
            --verbose
            README.md
            docs/**/*.md

  quickstart:
    needs:
      - detect-changes
    if: >-
      github.ref == 'refs/heads/main' ||
      needs.detect-changes.outputs.examples == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Quickstart (simulated pipeline)
        run: make quickstart
