name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      core_pkg: ${{ steps.filter.outputs.core_pkg }}
      examples: ${{ steps.filter.outputs.examples }}
      analysis: ${{ steps.filter.outputs.analysis }}
      cli: ${{ steps.filter.outputs.cli }}
      exporters: ${{ steps.filter.outputs.exporters }}
      ingestion: ${{ steps.filter.outputs.ingestion }}
      io: ${{ steps.filter.outputs.io }}
      processing: ${{ steps.filter.outputs.processing }}
      recommender: ${{ steps.filter.outputs.recommender }}
      plugins: ${{ steps.filter.outputs.plugins }}
      docs: ${{ steps.filter.outputs.docs }}
      full_suite_on_main: ${{ steps.build-pytest-matrix.outputs.full_suite_on_main }}
      pytest_matrix: ${{ steps.build-pytest-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - name: Load pytest areas
        id: load-pytest-areas
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            const raw = fs.readFileSync('.github/test-areas.yml', 'utf8');
            let parsed;

            try {
              parsed = JSON.parse(raw);
            } catch (error) {
              core.setFailed(`Unable to parse .github/test-areas.yml: ${error}`);
              return;
            }

            if (!parsed || !Array.isArray(parsed.areas)) {
              core.setFailed('Failed to load pytest areas from .github/test-areas.yml');
              return;
            }

            const filters = {};
            for (const area of parsed.areas) {
              filters[area.name] = area.filter_globs;
            }

            const lines = [];

            for (const [areaName, globs] of Object.entries(filters)) {
              lines.push(`${areaName}:`);

              for (const glob of globs) {
                const safeGlob = glob.replace(/'/g, "''");
                lines.push(`  - '${safeGlob}'`);
              }
            }

            const indentedFilters = lines
              .map((line) => `            ${line}`)
              .join('\n');

            core.setOutput('filters', indentedFilters);
            core.setOutput('areas', JSON.stringify(parsed.areas));
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # Each filter below mirrors a logical product area. When adding a
          # module or a new test file, update the relevant glob in
          # .github/test-areas.yml so the downstream pytest selection remains
          # accurate.
          filters: |
            core:
              - '.github/**'
              - 'benchmarks/**'
              - 'config/**'
              - 'Makefile'
              - 'mkdocs.yml'
              - 'modifiers/**'
              - 'pyproject.toml'
              - 'tests/**'
              - 'tnfr_lfs.toml'
              - 'src/tnfr_lfs/**'
              - 'typing_targets/**'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - '**/*.md'
            ${{ steps.load-pytest-areas.outputs.filters }}
      - name: Build pytest matrix
        id: build-pytest-matrix
        # The script consumes .github/test-areas.yml to build the pytest matrix
        # used by the test job, so updates only require editing that manifest.
        uses: actions/github-script@v7
        env:
          AREAS: ${{ steps.load-pytest-areas.outputs.areas }}
          ANALYSIS: ${{ steps.filter.outputs.analysis }}
          CORE_PKG: ${{ steps.filter.outputs.core_pkg }}
          CLI: ${{ steps.filter.outputs.cli }}
          EXPORTERS: ${{ steps.filter.outputs.exporters }}
          INGESTION: ${{ steps.filter.outputs.ingestion }}
          IO: ${{ steps.filter.outputs.io }}
          PROCESSING: ${{ steps.filter.outputs.processing }}
          RECOMMENDER: ${{ steps.filter.outputs.recommender }}
          PLUGINS: ${{ steps.filter.outputs.plugins }}
          IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
        with:
          result-encoding: string
          script: |
            const core = require('@actions/core');

            const areas = JSON.parse(process.env.AREAS);

            const changed = [];

            for (const area of areas) {
              const envName = area.name
                .toUpperCase()
                .replace(/[^A-Z0-9]/g, '_');
              const flag = process.env[envName];

              if (flag === 'true') {
                const pytestArgs = Array.isArray(area.pytest_args)
                  ? area.pytest_args.join(' ')
                  : (area.pytest_args || '').toString();

                const areaLabel = area.display_name || area.name;

                changed.push({ area: areaLabel, pytest_args: pytestArgs.trim() });
              }
            }

            const include = [...changed];

            const runFullSuite = process.env.IS_MAIN === 'true' && include.length === 0;

            if (runFullSuite) {
              include.unshift({ area: 'full', pytest_args: '' });
            }

            core.setOutput('full_suite_on_main', runFullSuite ? 'true' : 'false');
            core.setOutput('matrix', JSON.stringify(include));

            return JSON.stringify(include);


  test:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.pytest_matrix != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect-changes.outputs.pytest_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy --strict
      - name: Publish pytest selection
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "* **${PYTEST_AREA}** → full suite" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "* **${PYTEST_AREA}** → ${PYTEST_ARGS}" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Pytest
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          set -euo pipefail

          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "Running full pytest suite"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing
          else
            echo "Running targeted pytest selection for area '$PYTEST_AREA': $PYTEST_ARGS"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing $PYTEST_ARGS
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  link-check:
    name: Documentation links
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.docs == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --config lychee.toml
            --no-progress
            --verbose
            README.md
            docs/**/*.md

  quickstart:
    needs:
      - detect-changes
    if: >-
      github.ref == 'refs/heads/main' ||
      needs.detect-changes.outputs.examples == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Quickstart (simulated pipeline)
        run: make quickstart
