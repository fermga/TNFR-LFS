name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      core_pkg: ${{ steps.filter.outputs.core_pkg }}
      examples: ${{ steps.filter.outputs.examples }}
      analysis: ${{ steps.filter.outputs.analysis }}
      cli: ${{ steps.filter.outputs.cli }}
      exporters: ${{ steps.filter.outputs.exporters }}
      ingestion: ${{ steps.filter.outputs.ingestion }}
      io: ${{ steps.filter.outputs.io }}
      processing: ${{ steps.filter.outputs.processing }}
      recommender: ${{ steps.filter.outputs.recommender }}
      plugins: ${{ steps.filter.outputs.plugins }}
      docs: ${{ steps.filter.outputs.docs }}
      pytest_matrix: ${{ steps.pytest-matrix.outputs.matrix }}
      pytest_summary: ${{ steps.pytest-matrix.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # Each filter below mirrors a logical product area. When adding a
          # module or a new test file, update the relevant glob so the
          # downstream pytest selection remains accurate.
          filters: |
            core:
              - '.github/**'
              - 'benchmarks/**'
              - 'config/**'
              - 'Makefile'
              - 'mkdocs.yml'
              - 'modifiers/**'
              - 'pyproject.toml'
              - 'tests/**'
              - 'tnfr_lfs.toml'
              - 'src/tnfr_lfs/**'
              - 'typing_targets/**'
            core_pkg:
              - 'src/tnfr_lfs/core/**'
              - 'tests/test_core_*.py'
              - 'tests/test_coherence*.py'
              - 'tests/test_contextual_delta.py'
              - 'tests/test_metrics.py'
              - 'tests/test_operator_detection.py'
              - 'tests/test_phase_alias_deprecations.py'
              - 'tests/test_resonance.py'
              - 'tests/test_segmentation.py'
              - 'tests/test_structural_time.py'
              - 'tests/test_epi.py'
            analysis:
              - 'src/tnfr_lfs/analysis/**'
              - 'tests/test_analysis_*.py'
              - 'tests/analysis/**'
            cli:
              - 'src/tnfr_lfs/cli/**'
              - 'tests/test_cli*.py'
              - '!tests/test_cli_osd.py'
              - 'tests/test_cli_parser.py'
            exporters:
              - 'src/tnfr_lfs/exporters/**'
              - 'tests/test_*exporter*.py'
              - 'tests/test_replay_csv_bundle.py'
            ingestion:
              - 'src/tnfr_lfs/ingestion/**'
              - 'tests/test_ingestion.py'
              - 'tests/test_outgauge_udp.py'
              - 'tests/test_outsim_udp.py'
              - 'tests/test_insim.py'
              - 'tests/test_track_loader.py'
              - 'tests/ingestion/**'
            io:
              - 'src/tnfr_lfs/io/**'
              - 'tests/test_io_*.py'
              - 'tests/test_cli_io.py'
            processing:
              - 'src/tnfr_lfs/processing.py'
              - 'src/tnfr_lfs/processing/**'
              - 'tests/test_processing.py'
            recommender:
              - 'src/tnfr_lfs/recommender/**'
              - 'tests/test_recommender*.py'
              - 'tests/test_recommender_search_cache.py'
            plugins:
              - 'src/tnfr_lfs/plugins/**'
              - 'tests/plugins/**'
              - 'tests/test_cli_osd.py'
            examples:
              - 'examples/**'
            docs:
              - 'docs/**'
              - '**/*.md'

      - name: Generate pytest matrix
        id: pytest-matrix
        env:
          ON_MAIN: ${{ github.ref == 'refs/heads/main' }}
          CHANGED_CORE: ${{ steps.filter.outputs.core_pkg }}
          CHANGED_ANALYSIS: ${{ steps.filter.outputs.analysis }}
          CHANGED_CLI: ${{ steps.filter.outputs.cli }}
          CHANGED_EXPORTERS: ${{ steps.filter.outputs.exporters }}
          CHANGED_INGESTION: ${{ steps.filter.outputs.ingestion }}
          CHANGED_IO: ${{ steps.filter.outputs.io }}
          CHANGED_PROCESSING: ${{ steps.filter.outputs.processing }}
          CHANGED_RECOMMENDER: ${{ steps.filter.outputs.recommender }}
          CHANGED_PLUGINS: ${{ steps.filter.outputs.plugins }}
        run: |
          python <<'PY'
          import json
          import os

          area_flags = {
              "analysis": os.getenv("CHANGED_ANALYSIS") == "true",
              "core": os.getenv("CHANGED_CORE") == "true",
              "cli": os.getenv("CHANGED_CLI") == "true",
              "exporters": os.getenv("CHANGED_EXPORTERS") == "true",
              "ingestion": os.getenv("CHANGED_INGESTION") == "true",
              "io": os.getenv("CHANGED_IO") == "true",
              "processing": os.getenv("CHANGED_PROCESSING") == "true",
              "recommender": os.getenv("CHANGED_RECOMMENDER") == "true",
              "plugins": os.getenv("CHANGED_PLUGINS") == "true",
          }

          area_to_targets = {
              "analysis": [
                  "tests/test_analysis_*.py",
                  "tests/analysis",
              ],
              "core": [
                  "tests/test_core_*.py",
                  "tests/test_coherence*.py",
                  "tests/test_contextual_delta.py",
                  "tests/test_metrics.py",
                  "tests/test_operator_detection.py",
                  "tests/test_phase_alias_deprecations.py",
                  "tests/test_resonance.py",
                  "tests/test_segmentation.py",
                  "tests/test_structural_time.py",
                  "tests/test_epi.py",
              ],
              "cli": [
                  "tests/test_cli.py",
                  "tests/test_cli_*.py",
                  "tests/test_cli_parser.py",
              ],
              "exporters": [
                  "tests/test_*exporter*.py",
                  "tests/test_replay_csv_bundle.py",
              ],
              "ingestion": [
                  "tests/test_ingestion.py",
                  "tests/test_outgauge_udp.py",
                  "tests/test_outsim_udp.py",
                  "tests/test_insim.py",
                  "tests/test_track_loader.py",
                  "tests/ingestion",
              ],
              "io": [
                  "tests/test_io_*.py",
                  "tests/test_cli_io.py",
              ],
              "processing": [
                  "tests/test_processing.py",
              ],
              "recommender": [
                  "tests/test_recommender*.py",
                  "tests/test_recommender_search_cache.py",
              ],
              "plugins": [
                  "tests/plugins",
                  "tests/test_cli_osd.py",
              ],
          }

          on_main = os.getenv("ON_MAIN") == "true"
          selected_areas = [area for area, changed in area_flags.items() if changed]

          includes = []
          summary_lines = []

          if on_main:
              includes.append({"area": "full", "pytest_args": ""})
              summary_lines.append("main branch -> run full suite")
          elif not selected_areas:
              includes.append({"area": "full", "pytest_args": ""})
              summary_lines.append("no targeted area detected -> run full suite")
          else:
              for area in selected_areas:
                  targets = area_to_targets.get(area, [])
                  if targets:
                      args = " ".join(targets)
                      includes.append({"area": area, "pytest_args": args})
                      summary_lines.append(f"{area} -> {args}")
                  else:
                      summary_lines.append(f"{area} -> no explicit targets; run full suite")

              if not includes:
                  includes.append({"area": "full", "pytest_args": ""})
                  summary_lines.append("areas with no explicit targets -> run full suite")

          matrix = {"include": includes}

          output_path = os.environ["GITHUB_OUTPUT"]
          with open(output_path, "a", encoding="utf-8") as fh:
              fh.write(f"matrix={json.dumps(matrix)}\n")
              fh.write("summary<<EOF\n")
              fh.write("\n".join(summary_lines) + "\n")
              fh.write("EOF\n")
          PY

  test:
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.core == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.pytest_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Ruff
        run: ruff check .
      - name: Mypy
        run: mypy --strict
      - name: Publish pytest selection
        if: ${{ strategy.job-index == 0 && needs.detect-changes.outputs.pytest_summary != '' }}
        env:
          PYTEST_SELECTION_SUMMARY: ${{ needs.detect-changes.outputs.pytest_summary }}
        run: |
          cat <<EOF >> "$GITHUB_STEP_SUMMARY"
          ${PYTEST_SELECTION_SUMMARY}
          EOF
      - name: Pytest
        env:
          PYTEST_ARGS: ${{ matrix.pytest_args }}
          PYTEST_AREA: ${{ matrix.area }}
        run: |
          set -euo pipefail

          if [[ -z "$PYTEST_ARGS" ]]; then
            echo "Running full pytest suite"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing
          else
            echo "Running targeted pytest selection for area '$PYTEST_AREA': $PYTEST_ARGS"
            pytest --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing $PYTEST_ARGS
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
  link-check:
    name: Documentation links
    needs: detect-changes
    if: >-
      needs.detect-changes.outputs.docs == 'true' ||
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Check documentation links
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --config lychee.toml
            --no-progress
            --verbose
            README.md
            docs/**/*.md

  quickstart:
    needs:
      - detect-changes
    if: >-
      github.ref == 'refs/heads/main' ||
      needs.detect-changes.outputs.examples == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          # Install project + dev extras (brings in numpy/pandas before pytest)
          pip install .[dev]
      - name: Quickstart (simulated pipeline)
        run: make quickstart
