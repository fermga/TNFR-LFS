[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tnfr-lfs"
dynamic = ["version"]
description = "Fractal-Resonant Telemetry Analytics for Live for Speed toolkit"
readme = "docs/index.md"
authors = [{ name = "TNFR Team" }]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy>=1.24,<2.0",
    "pandas>=1.5,<3.0",
    "tomli>=2.0.1; python_version < '3.11'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "black>=24.4.0",
    "python-semantic-release>=9.8.5",
]
benchmark = [
    "pytest-benchmark>=4.0.0",
]

[project.urls]
Homepage = "https://example.com/tnfr-lfs"

[project.scripts]
"tnfr-lfs" = "tnfr_lfs.cli.tnfr_lfs_cli:main"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra"
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 88
src = ["tnfr_lfs", "tests", "examples", "typing_targets"]

[tool.ruff.lint]
per-file-ignores = {"tests/conftest.py" = ["E402"]}

[tool.black]
line-length = 88
target-version = ["py39"]

[tool.mypy]
python_version = "3.9"
files = ["typing_targets", "tnfr_lfs", "tests"]
warn_unused_configs = true

[tool.setuptools.package-data]
"tnfr_lfs.data" = ["*.toml", "playbooks/*.toml"]

[tool.setuptools.data-files]
"tnfr_lfs_pack/data/tracks" = ["data/tracks/*.toml"]
"tnfr_lfs_pack/data/track_profiles" = ["data/track_profiles/*.toml"]
"tnfr_lfs_pack/data/cars" = ["data/cars/*.toml"]
"tnfr_lfs_pack/data/profiles" = ["data/profiles/*.toml"]
"tnfr_lfs_pack/data" = ["data/lfs_class_overrides.toml"]
"tnfr_lfs_pack/config" = ["config/global.toml"]
"tnfr_lfs_pack/modifiers/combos" = ["modifiers/combos/*.toml"]

[tool.semantic_release]
branch = "main"
version_source = "tag"
commit_parser = "angular"
changelog_file = "CHANGELOG.md"
build_command = "python -m pip install --upgrade build && python -m build"
tag_format = "v{version}"
upload_to_pypi = true
