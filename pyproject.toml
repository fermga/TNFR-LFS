[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tnfr_lfs"
dynamic = ["version"]
description = "Fractal-Resonant Telemetry Analytics for Live for Speed toolkit"
readme = "docs/index.md"
authors = [{ name = "TNFR Team" }]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy>=1.24,<2.0",
    "pandas>=1.5,<3.0",
    "packaging>=23",
    "tomli>=2.0.1; python_version < '3.11'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=5.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "black>=24.4.0",
    "pre-commit>=3.0",
    "python-semantic-release>=9.8.5",
    "mkdocs>=1.5.0",
    "mkdocs-static-i18n>=1.2.0",
    "mkdocs-macros-plugin>=1.0.5",
    "mkdocs-autoapi>=0.4.0",
]
benchmark = [
    "pytest-benchmark>=4.0.0",
]
spectral = [
    "scipy>=1.10",
]

[project.urls]
Homepage = "https://github.com/fermga/TNFR-LFS"

[project.scripts]
"tnfr_lfs" = "tnfr_lfs.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
version = { attr = "tnfr_lfs._version.__version__" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --cov=tnfr_lfs --cov-report=xml --cov-report=term-missing"
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 88
src = ["src", "tests", "examples"]

[tool.ruff.lint]
per-file-ignores = {"tests/conftest.py" = ["E402"]}

[tool.black]
line-length = 88
target-version = ["py39"]

[tool.mypy]
python_version = "3.9"
files = ["src", "tests"]
warn_unused_configs = true

[tool.tnfr_lfs.logging]
level = "info"
output = "stderr"
format = "json"

[tool.tnfr_lfs.core]
host = "127.0.0.1"
outsim_port = 4123
outgauge_port = 3000
insim_port = 29999
udp_timeout = 0.01
udp_retries = 3

[tool.tnfr_lfs.performance]
telemetry_buffer_size = 64
cache_enabled = true
max_cache_size = 256

[tool.tnfr_lfs.analyze]
export = "json"

[tool.tnfr_lfs.suggest]
car_model = "FZR"
track = "AS5"

[tool.tnfr_lfs.paths]
output_dir = "out"
pack_root = "."

[tool.tnfr_lfs.limits.delta_nfr]
entry = 0.5
apex = 0.4
exit = 0.6

[tool.tnfr_lfs.plugins]
auto_discover = true
plugin_dir = "plugins"
max_concurrent = 4

[tool.tnfr_lfs.plugins.telemetry]
enabled = true
entry_point = "tnfr_lfs.plugins.telemetry:TelemetryPlugin"
buffer_seconds = 15
flush_interval = "5s"

[tool.tnfr_lfs.plugins.telemetry.transport]
protocol = "udp"
host = "127.0.0.1"
port = 3000

[tool.tnfr_lfs.plugins.exporter]
enabled = true
entry_point = "tnfr_lfs.plugins.exporter:ExporterPlugin"
targets = ["jsonl", "html"]
flush_on_shutdown = true

[tool.tnfr_lfs.plugins.exporter.jsonl]
path = "out/telemetry.jsonl"
mode = "append"

[tool.tnfr_lfs.plugins.exporter.html]
path = "out/dashboard.html"
template = "docs/templates/dashboard.html"

[tool.tnfr_lfs.plugins.relay]
enabled = false
entry_point = "tnfr_lfs.plugins.relay:RelayPlugin"
channel = "zeromq"
bind = "tcp://127.0.0.1:6000"

[tool.tnfr_lfs.profiles.racing]
max_concurrent = 4
plugins = ["telemetry", "exporter", "relay"]

[tool.tnfr_lfs.profiles.racing.telemetry]
flush_interval = "1s"

[tool.tnfr_lfs.profiles.racing.exporter]
targets = ["jsonl"]
flush_on_shutdown = false

[tool.tnfr_lfs.profiles.racing.relay]
enabled = true
channel = "zeromq"
bind = "tcp://0.0.0.0:6000"

[tool.tnfr_lfs.profiles.practice]
max_concurrent = 2
plugins = ["telemetry", "exporter"]

[tool.tnfr_lfs.profiles.practice.telemetry]
buffer_seconds = 30
flush_interval = "10s"

[tool.tnfr_lfs.profiles.practice.exporter]
targets = ["html"]
path = "out/practice-dashboard.html"
template = "docs/templates/practice.html"

[tool.setuptools.package-data]
"tnfr_lfs.data" = ["*.toml", "playbooks/*.toml"]
"tnfr_lfs.resources" = [
    "data/*",
    "data/**/*",
    "config/*",
    "config/**/*",
    "modifiers/*",
    "modifiers/**/*",
]

[tool.semantic_release]
branch = "main"
version_source = "tag"
commit_parser = "angular"
changelog_file = "CHANGELOG.md"
build_command = "python -m pip install --upgrade build && python -m build"
tag_format = "v{version}"
upload_to_pypi = true
